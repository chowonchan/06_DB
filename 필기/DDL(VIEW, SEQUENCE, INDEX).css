[ VIEW ]

  논리적 가상 테이블
  * 	-> 테이블 모양을 하고는 있지만, 실제로 값을 저장하고 있진 않음.
  * 
  *  - SELECT문의 실행 결과(RESULT SET)를 저장하는 객체

  ** VIEW 작성법 **
  *  CREATE [OR REPLACE] [FORCE | NOFORCE] VIEW 뷰이름 [컬럼 별칭]
  *  AS 서브쿼리(SELECT문)
  *  [WITH CHECK OPTION]
  *  [WITH READ OLNY];
  * 
  * 
  *  1) ****OR REPLACE 옵션 : 
  * 		기존에 동일한 이름의 VIEW가 존재하면 이를 변경
  * 		없으면 새로 생성
  * 
  *  2) FORCE | NOFORCE 옵션 : 
  *    FORCE : 서브쿼리에 사용된 테이블이 존재하지 않아도 뷰 생성
  *    NOFORCE(기본값): 서브쿼리에 사용된 테이블이 존재해야만 뷰 생성
  *    
  *  3) 컬럼 별칭 옵션 : 조회되는 VIEW의 컬럼명을 지정
  * 
  *  4) WITH CHECK OPTION 옵션 : 
  * 		옵션을 지정한 컬럼의 값을 수정 불가능하게 함.
  * 
  *  5) ****WITH READ OLNY 옵션 :
  * 		뷰에 대해 SELECT만 가능하도록 지정.


[ SEQUENCE(순서, 연속) ]
  * - 순차적으로 일정한 간격의 숫자(번호)를 발생시키는 객체
  *   (번호 생성기)

  *** SEQUENCE 왜 사용할까?? ***
  * PRIMARY KEY(기본키) : 테이블 내 각 행을 구별하는 식별자 역할
  * 						 NOT NULL + UNIQUE의 의미를 가짐

  * PK가 지정된 컬럼에 삽입될 값을 생성할 때 SEQUENCE를 이용하면 좋다!

  *   [작성법]
  CREATE SEQUENCE 시퀀스이름
  [STRAT WITH 숫자] -- 처음 발생시킬 시작값 지정, 생략하면 자동 1이 기본
  [INCREMENT BY 숫자] -- 다음 값에 대한 증가치, 생략하면 자동 1이 기본
  [MAXVALUE 숫자 | NOMAXVALUE] -- 발생시킬 최대값 지정 (10의 27승 -1)
  [MINVALUE 숫자 | NOMINVALUE] -- 최소값 지정 (-10의 26승)
  [CYCLE | NOCYCLE] -- 값 순환 여부 지정
  [CACHE 바이트크기 | NOCACHE] -- 캐쉬메모리 기본값은 20바이트, 최소값은 2바이트
  -- 시퀀스의 캐시 메모리는 할당된 크기만큼 "미리" 다음 값들을 생성해 저장해둠

  ** 사용법 **
  * 
  * 1) 시퀀스명.NEXTVAL : 다음 시퀀스 번호를 얻어옴.
  * 						         (INCREMENT BY 만큼 증가된 수)
  * 						          단, 생성 후 처음 호출된 시퀀스인 경우
  * 						          START WITH에 작성된 값이 반환됨.
  * 
  * 2) 시퀀스명.CURRVAL : 현재 시퀀스 번호를 얻어옴.
  * 						          단, 시퀀스가 생성 되자마자 호출할 경우 오류 발생.
  * 						          == 마지막으로 호출한 NEXTVAL 값을 반환

 [ INDEX(색인) ]  : 번호로 위치를 알게함
  * - SQL 구문 중 SELECT 처리 속도를 향상 시키기 위해 
  *   컬럼에 대하여 생성하는 객체
  *                   (Binary tree)
  * - 인덱스 내부 구조는 B* 트리 형식으로 되어있음.

  ** 인덱스가 자동 생성되는 경우 ** CREATE 
  *  -> PK 또는 UNIQUE 제약조건이 설정된 컬럼에 대해 
  *    UNIQUE INDEX가 자동 생성된다. 