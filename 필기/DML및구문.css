*** DML(Data Manipulation Language) : 데이터 조작 언어

-- 테이블에 값을 삽입하거나(INSERT), 수정하거나(UPDATE), 삭제(DELETE)하는 구문
-- SELECT도 DML에 포함되긴 하지만 DQL이라는 것으로 분리해서 보기도 한다
	--> DQL(Date Query Language : 데이터 질의 언어)

-- 주의 : 혼자서 COMMIT, ROLLBACK 하지 말것!

-- 테스트용 테이블 생성
CREATE TABLE 테이블 명 AS SELECT * FROM EMPLOYEE;
CREATE TABLE 테이블 명 AS SELECT * FROM DEPARTMENT;

SELECT * FROM EMPLOYEE2;
SELECT * FROM DEPARTMENT2;

--------------------------------------------------------------------------------------------------------------------

-- 1. INSERT

  -- 테이블에 새로운 행을 추가하는 구문
  1)  INSERT INTO 테이블명 VALUES(데이터, 데이터, ...)
  -- 테이블에 모든 컬럼에 대한 값을 INSERT할 때 사용
  -- INSERT하고자 하는 컬럼이 모든 컬럼인 경우 컬럼명 생략 가능. 
  -- 단, 컬럼의 순서를 지켜서 VALUES에 값을 기입해야 함

      *****
      INSERT INTO 테이블명
      VALUES(모든 컬럼에 추가할 값);


  2)  INSERT INTO 테이블명(컬럼명, 컬럼명, 컬럼명,...)
  -- VALUES (데이터1, 데이터2, 데이터3, ...);
  -- 테이블에 내가 선택한 컬럼에 대한 값만 INSERT할 때 사용
  -- 선택안된 컬럼은 값이 NULL이 들어감

      *****
      INSERT INTO 테이블명 (컬럼1, 컬럼2, ...)
      VALUES(컬럼1 값, 컬럼2 값, ....)


-- 2. UPDATE

  -- 테이블에 기록된 컬럼의 값을 수정하는 구문

  -- [작성법]
  -- UPDATE 테이블명 
    SET 컬럼명 = 바꿀값 [WHERE 컬럼명 비교연산자 비교값];


  * UPDATE시에도 서브쿼리를 사용 가능

    -- [작성법]
    -- UPDATE 테이블명
    -- SET 컬럼명 = 수정할 값(서브쿼리),
                    ....
       WHERE
            수정하려는 행을 찾는 조건;


  3. MERGE(병합) (참고만 하세요!)

  -- 구조가 같은 두 개의 테이블을 하나로 합치는 기능.
  -- 테이블에서 지정하는 조건의 값이 존재하면 UPDATE
  -- 조건의 값이 없으면 INSERT됨


  4. DELETE
    -- 테이블의 행을 삭제하는 구문

    -- [작성법]
    -- DELTE FROM 테이블명 WHERE 조건설정
    -- 만약 WHERE 조건을 설정하지 않으면 모든 행이 다 삭제됨

    DELETE
    FROM 테이블 명
    WHERE 조건 = 조건설정;


  5. TRUNCATE (DDL 입니다! DML 아닙니다!)
    -- 테이블의 전체 행을 삭제하는 DDL
    -- DELETE보다 수행속도가 더 빠르다.
    -- ROLLBACK을 통해 복구할 수 없다.

    TRUNCATE TABLE 컬럼명;


========================
5 : SELECT -- 조회할 컬럼을 지정
1 : FROM 테이블  -- 조회할 테이블
2 : WHERE 조건식 -- 조회하려는 행만 골라내기
3 : GROUP BY 컬럼명 -- 같은 컬럼값을 지닌 행끼리 그룹화
4 : HAVING          -- 조건에 맞는그룹만 조회
7 : ORDER BY 컬럼명 -- 조회 결과 정렬 기준 작성

========================
[INSERT] : XPDLQMFDP GODDLF TKQDLQGKSMS RNANS

1) INSERT INTO 테이블명
VALUES(모든 컬럼에 대입할 값 순서대로 작성);

2)
INSERT INTO 테이블 명(컬럼1 , 컬럼2, 컬럼3,...)
VALUES(컬럼1 값, 컬럼2 값, 컬럼3 값,...)
--> 값이 삽입되지 않은 컬럼은 NULL

* 서브쿼리 결과를 지정된 테이블에 모두삽입
INSERT INTO 테이블 명
AS ( 서브쿼리 )

=======================
UPDATE : 테이블에서 지정된 행의 컬럼 값을 수정하는 구문

UPDATE 테이블명
SET 컬럼명 = 수정할 값,
    컬럼명 = 수정할 값,
WHERE 행을 지정하는 조건 ; 


========================
DELETE : 테이블의 행을 삭제하는 구문


========================
* DML (Data Manipulation Language) : 데이터 조작언어

- 테이블에 값을 삽입, 수정, 삭제  
SELECT, INSERT, UPDATE, DELETE, MERGE

* DQL (Data Query Language) : 데이터 질의 언어

- 테이블에 저장된 값을 조회
- SELECT

-----------------------08.22 --------------------------

***********[ TCL (Transaction Control Language) ] : 트랜잭션 제어 언어
  (Transaction : 업무, 처리)
  
- COMMIT : 데이터 변경 사항(DML)을 DB에 반영

- ROLLBACK : 저장된 데이터 변경 사항을 삭제하고 
            마지막 COMMIT 상태로 돌아감. (== 트랜잭션 내용 삭제)

- SAVEPOINT : 저장 지점을 정의하여
              ROLLBACK 수행 시 전체 작업을 삭제하는 것이 아닌
              저장 지점까지만 일부 ROLLBACK   

/* TRANSACTION이란?
 - 데이터베이스의 논리적 연산 단위
 
 - 데이터 변경 사항(DML)을 묶어 하나의 트랜잭션에 담아 처리함.

 - 트랜잭션의 대상이 되는 데이터 변경 사항 : INSERT, UPDATE, DELETE (DML)



/* 현재 트랜잭션에 저장된 DML(INSERT, UPDATE) 구문을
 * 실제로 DB에 반영 -> COMMIT */
 
-- ROLLBACK 해도 지워지거나 돌아가지 않는다


*********[ DDL (Data Definition Language) ] : 데이터 정의 언어

- 데이터 정의 언어로 객체(OBJECT)를 만들고(CREATE), 수정하고(ALTER), 
  삭제(DROP)하는 구문을 말함


  CREATE

-- 테이블이나 인덱스, 뷰 등 다양한 데이터베이스 객체를 생성하는 구문
-- 테이블로 생성된 객체는 DROP 구문을 통해 제거 할 수 있음 


-- 1. 테이블 생성하기
-- 테이블이란?
-- 행(row)과 열(column)으로 구성되는 가장 기본적인 데이터베이스 객체
-- 데이터 배이스 내에서 모든 데이터는 테이블을 통해서 저장된다.

-- [표현식] 

NUMBER
CHAR
VARCHAR2
NVARCHAR2

/*
NUMBER : 숫자형(정수, 실수)
CHAR(크기) : "고정"길이 문자형 (2000BYTE) 
        -> ex) CHAR(10) 컬럼에 'ABC' 3BYTE 문자열만 저장해도 10BYTE 저장공간을 모두 사용. 
        - 전화번호 같은 것에 사용

VARCHAR2(크기) : "가변"길이 문자형 (4000 BYTE)
-> ex) VARCHAR2(10) 컬럼에 'ABC' 3BYTE 문자열만 저장하면 나머지 7BYTE를 반환함.

** VARCHAR2 주의사항 **
-오라클은 기본적으로 UTF-8 문자 인코딩을 사용하는데 
UTF-8 은

영어/숫자 : 1BYTE
한글 		 : 3BYTE

로 저장하기 때문에 한글 데이터 저장 시 크기 계산을 주의해야 한다 !!


NVARCHAR2(문자 개수) : "가변" 길이 문자형( 4000BYTE )
- BYTE크기 단위가 아닌 글자 수(문자 개수)로 크기를 지정하는 타입 */

CREATE TABLE "MEMBER"(
		MEMBER_ID VARCHAR2(20BYTE),
		MEMBER_PW VARCHAR2(20BYTE),
		MEMBER_NAME VARCHAR2(15BYTE),
		MEMBER_SSN CHAR(14BYTE),
		ENROLL_DATE DATE DEFAULT CURRENT_DATE -- 기본 값 설정
);


2. 컬럼에 주석 달기

-- [표현식]
-- COMMENT ON COLUMN 테이블명.컬럼명 IS '주석내용';

COMMENT ON COLUMN "MEMBER".MEMBER_ID IS '회원 아이디';
COMMENT ON COLUMN "MEMBER".MEMBER_PW IS '회원 비밀번호';
COMMENT ON COLUMN "MEMBER".MEMBER_NAME IS '회원 이름';
COMMENT ON COLUMN "MEMBER".MEMBER_SSN IS '회원 주민등록번호';
COMMENT ON COLUMN "MEMBER".ENROLL_DATE IS '회원 가입일';

  제약 조건(CONSTRAINTS)
  /*
      사용자가 원하는 조건의 데이터만 유지하기 위해서 특정 컬럼에 설정하는 제약.
      '데이터 무결성' 보장을 목적으로 함. -> 데이터의 신뢰도 확보를 위해
  
      + 입력 데이터에 문제가 없는지 자동으로 검사하는 목적
      + 데이터의 수정/삭제 가능여부 검사등을 목적으로 함 
          --> 제약조건을 위배하는 DML 구문은 수행할 수 없음!

      *****
      제약조건 종류

      NOT NULL,
      UNIQUE, 
      PRIMARY KEY, 
      CHECK, 
      FOREIGN KEY.
      
  */


  1. NOT NULL 
  -- 해당 컬럼에 반드시 값이 기록되어야 하는 경우 사용
  -- 삽입/수정시 'NULL값을 허용하지 않도록' 컬럼레벨에서 제한

  -- 컬럼레벨 : 테이블 생성 시 생성할 컬럼의 정보를 작성하는 부분
  -- NULL 값 삽입시 오류

  CREATE TABLE USER_USED_NN(
      USER_NO NUMBER NOT NULL, -- 컬럼 레벨 제약 조건 설정
      
      USER_ID VARCHAR2(20) ,
      USER_PWD VARCHAR2(30) ,
      USER_NAME VARCHAR2(30) ,
      GENDER VARCHAR2(10),
      PHONE VARCHAR2(30),
      EMAIL VARCHAR2(50)

    -- 테이블 레벨 자리
  );


  2. UNIQUE 제약조건 
    -- 컬럼에 입력 값에 대해서 중복을 제한하는 제약조건
    -- 컬럼레벨에서 설정 가능, 테이블 레벨에서 설정 가능
    -- 단, UNIQUE 제약 조건이 설정된 컬럼에 "NULL 값은 중복 삽입 가능".

    USER_ID VARCHAR2(20) CONSTRAINT USER_ID_U UNIQUE

    하단에 

    CONSTRAINT USER_ID_U UNIQUEUNIQUE (USER_ID) 라고도 작성한다


    -- UNIQUE 복합키 : 여러 컬럼이 중복이어야 중복
    -- 두 개 이상의 컬럼을 묶어서 하나의 UNIQUE 제약조건을 설정함
    --> 복합키 설정은 오직 테이블 레벨에서만 지정 가능!!

    CONSTRAINT USER_ID_NAME_U UNIQUE(USER_ID,USER_NAME)


  3. PRIMARY KEY(기본키) 제약조건 

    -- 테이블에서 한 행의 정보를 찾기위해 사용할 컬럼을 의미함

    -- ** 테이블에 대한 식별자(IDENTIFIER) 역할을 함**

    -- NOT NULL + UNIQUE 제약조건의 의미
    -- 한 테이블당 한 개만 설정할 수 있음
    -- 컬럼레벨, 테이블레벨 둘다 설정 가능함
    -- 한 개 컬럼에 설정할 수도 있고, 여러개의 컬럼을 묶어서 설정할 수 있음
    
    --> 같은 식별 번호 값 삽입시 오류 , NULL 값 삽입시 오류




  /* 관계형 데이터베이스 핵심 */
  4. FOREIGN KEY(외부키 / 외래키) 제약조건 
    ****
    -- 자식 테이블 컬럼에 저장될 수 있는 값은 
        부모 테이블 컬렘에 작성된 값만 저장 가능

      -- 제공되는 값 외에는 NULL을 사용할 수 있음
  ***********
      -- 컬럼레벨일 경우
      -- 컬럼명 자료형(크기) [CONSTRAINT 이름] 
        REFERENCES 참조할 테이블명 [(참조할컬럼)] [삭제룰]

  *********
      -- 테이블레벨일 경우
      -- [CONSTRAINT 이름] FOREIGN KEY (적용할컬럼명) 
        REFERENCES 참조할테이블명 [(참조할컬럼)] [삭제룰]


      -- * 참조될 수 있는 컬럼은 PRIMARY KEY컬럼과, UNIQUE 지정된 컬럼만 외래키로 사용할 수 있음
      --참조할 테이블의 참조할 컬럼명이 생략이 되면, PRIMARY KEY로 설정된 컬럼이 자동 참조할 컬럼이 됨


      1) ON DELETE RESTRICTED(삭제 제한)로 기본 지정되어 있음
      -- FOREIGN KEY로 지정된 컬럼에서 사용되고 있는 값일 경우
      -- 제공하는 컬럼의 값은 삭제하지 못함

      2) ON DELETE SET NULL : 부모키 삭제시 자식키를 NULL로 변경하는 옵션

      컬럼명 자료형(크기) 
      [CONSTRAINT 이름] 
      REFERENCES 참조할 테이블명 [(참조할컬럼)]
      ON DELETE SET NULL


      3) ON DELETE CASCADE : 부모키 삭제시 자식키도 함께 삭제됨
      -- 부모키 삭제시 값을 사용하는 자식 테이블의 컬럼에 해당하는 행이 삭제가 됨


  5. CHECK 제약조건 : 컬럼에 기록되는 값에 조건 설정을 할 수 있음
    -- CHECK (컬럼명 비교연산자 비교값)
    -- 주의 : 비교값은 리터럴만 사용할 수 있음, 변하는 값이나 함수 사용 못함

    컬럼명 자료형(크기)  
  	  CONSTRAINT 이름_CHECK
  	  CHECK( 이름 IN (컬럼명 비교연산자 비교값) )


  6. SUBQUERY를 이용한 테이블 생성
    -- 컬럼명, 데이터 타입, 값이 복사되고, 제약조건은 NOT NULL 만 복사됨

    JOIN 후 원하는 컬럼만 테이블로 복사 ( AS 후 괄호 시 오류 )

    CREATE TABLE EMPLOYEE_COPY2
    AS SELECT 
          EMP_NAME,
          NVL(DEPT_TITLE,'부서없음') AS DEPT_TITLE,
          JOB_NAME
       FROM EMPLOYEE
       JOIN JOB USING(JOB_CODE)
       LEFT JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
       ORDER BY JOB_CODE ASC;


  7. 제약조건 추가
    -- ALTER TABLE 테이블명 
       ADD [CONSTRAINT 제약조건명] 
       PRIMARY KEY(컬럼명)

    -- ALTER TABLE 테이블명 
       ADD [CONSTRAINT 제약조건명] 
       FOREIGN KEY(컬럼명) 
       REFERENCES 참조 테이블명(참조컬럼명)

      --> 참조 테이블의 PK를 기본키를 FK로 사용하는 경우 참조컬럼명 생략 가능
    
    -- ALTER TABLE 테이블명 ADD [CONSTRAINT 제약조건명] UNIQUE(컬럼명)

    -- ALTER TABLE 테이블명 ADD [CONSTRAINT 제약조건명] CHECK(컬럼명 비교연산자 비교값)

    -- ALTER TABLE 테이블명 MODIFY 컬럼명 NOT NULL;

**********[ DCL ]
